#!/bin/bash
# tb01110100's experimental lemonbar setup

if test ! -e ~/.lemonbar.conf; then
    printf "~/.lemonbar.conf does not exist, please create it\n" >&2
    exit 1
fi

icon_gen() { printf "%b\n" "%{F$color_ic}\u$1%{F-}"; }
source ~/.lemonbar.conf

modules() {
  # bspwm stats
  bspc control --subscribe > "$BAR_FIFO" &

  # date & time
  while true; do
    date +"c${i_date}  %m·%d·%y     ${i_time}  %H:%M"
    sleep 1
  done > "$BAR_FIFO" &

#  # weather
#  while true; do
#    [[ "$units" = "f" ]] && shaman -l "$city" -f "w${i_weather//%/%%}  %c %t f"
#    [[ "$units" = "c" ]] && shaman -l "$city" -f "w${i_weather//%/%%}  %c %t c" -m
#    sleep 10
#  done > "$BAR_FIFO" &

  # disk usage
  while true; do
    echo "d${i_disk}  $(df -h / | tail -n 1 | awk '{print $3}' | tr '[:upper:]' '[:lower:]') / $(df -h / | tail -n 1 | awk '{print $2}' | tr '[:upper:]' '[:lower:]')"
    sleep 60
  done > "$BAR_FIFO" &

  # ram usage
  while true; do
    echo "r${i_mem}  $(free -h | grep Mem | awk '{print $3}' | tr '[:upper:]' '[:lower:]') / $(free -h | grep Mem | awk '{print $2}' | tr '[:upper:]' '[:lower:]')"
    sleep 5
  done > "$BAR_FIFO" &

  # update checking
  while true; do
    echo "u${i_pac}  checking..."
    updates="$({ checkupdates; cower -u; } | wc -l)"
    [[ $updates != 1 ]] && word="updates"
    [[ $updates = 1 ]] && word="update"
    [[ $updates = 0 ]] && updates="no"
    echo "u${i_pac}  $updates $word"
    sleep 180
  done > "$BAR_FIFO" &

  # mpd info
  #while true; do
  #  [[ -z "$(pidof python2)" ]] && { echo "p ${i_mpd}  mopidy is not running"; sleep 1; continue; }
  #  [[ "$(printf "status\nclose\n" | curl --connect-timeout 1 -fsm 3 telnet://localhost:$mpdport | grep state:)" = "state: pause" ]] && { echo "p ${i_mpd}  paused"; sleep 1; continue; }
  #  [[ "$(printf "status\nclose\n" | curl --connect-timeout 1 -fsm 3 telnet://localhost:$mpdport | grep state:)" = "state: stop" ]] && { echo "p"; sleep 1; continue; }
  #  echo "p ${i_mpd}  $(mpc current -f %artist%) > $(mpc current -f %title%)" | tr '[:upper:]' '[:lower:]'
  #  sleep .5
  #done > "$BAR_FIFO" &

  # cpu temps
  while true; do
    core0=$(sensors coretemp-isa-0000 | grep "Core 0" | awk '{print $3}')
    core1=$(sensors coretemp-isa-0000 | grep "Core 1" | awk '{print $3}')
    core2=$(sensors coretemp-isa-0000 | grep "Core 2" | awk '{print $3}')
    core3=$(sensors coretemp-isa-0000 | grep "Core 3" | awk '{print $3}')
    echo "t${i_temp}  $core0 $core1 $core2 $core3" | tr -d 'C+'
    sleep 1
  done > "$BAR_FIFO" &
}

parse-module-output() {
  while read -r line ; do
    case $line in
      p*)
        # set up mpd indicator
        mpdinfo="${line#?}" ;;
      t*)
        # set up cpu temp indicator
        cputemps="${line#?}" ;;
#     v*)
#       # set up volume indicator
#       volume="${line#?}" ;;
      r*)
        # set up mem indicator
        mem="${line#?}" ;;
      d*)
        # set up rootfs indicator
        rootfs="${line#?}" ;;
      u*)
        # set up update indicator
        updates="${line#?}" ;;
      w*)
        # set up weather
        weather="${line#?}" ;;
      c*)
        # set up clock
        clock="${line#?}" ;;
      W*)
        # set up tags
        wm_infos=""
        IFS=':'
        set -- ${line#?}
        while [ $# -gt 0 ] ; do
          item=$1
          name=${item#?}
          desk=" $name "
          case $item in
            O*)
              # focused occupied desktop
              wm_infos="$wm_infos%{F$color_01}%{A:bspc desktop -f $name:}$desk%{A}" ;;
            F*)
              # focused empty desktop
              wm_infos="$wm_infos%{F$color_02}%{A:bspc desktop -f $name:}$desk%{A}" ;;
            U*)
              # focused urgent desktop
              wm_infos="$wm_infos%{F$color_03}%{A:bspc desktop -f $name:}$desk%{A}" ;;
            o*)
              # occupied desktop
              wm_infos="$wm_infos%{F$color_04}%{A:bspc desktop -f $name:}$desk%{A}" ;;
            f*)
              # free desktop
              wm_infos="$wm_infos%{F$color_05}%{A:bspc desktop -f $name:}$desk%{A}" ;;
            u*)
              # urgent desktop
              wm_infos="$wm_infos%{F$color_06}%{A:bspc desktop -f $name:}$desk%{A}" ;;
            m*|M*)
              # monitor seperator
              wm_infos="$wm_infos%{F-}  " ;;
          esac
          shift
        done ;;
    esac
    printf "%s\n" "%{c} $wm_infos   %{F-}$mpdinfo    %{S+}$cputemps    $mem    $rootfs    $updates    $weather    $clock"
  done
}

# prepare
if [[ $(pgrep -cx bard) -gt 1 ]]; then
  echo "lemonbar is already running" >&2
  exit 1
fi
trap 'trap - TERM; kill 0' INT TERM QUIT EXIT
[ -e "$BAR_FIFO" ] && rm "$BAR_FIFO"
mkfifo "$BAR_FIFO"

# run module commands
modules &

# pull it all together
parse-module-output < "$BAR_FIFO" | lemonbar -p -f "$fonts" -B "$color_bg" -F "$color_fg" -g "$geometry" | while read line; do eval "$line"; done &

wait
